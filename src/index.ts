import { app, BrowserWindow, Menu, dialog, ipcMain } from 'electron';
import express from 'express';
import os from 'node:os';
import fs from 'node:fs';

// This allows TypeScript
// to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// ---------- make an electron attribute of the window global ---------- //
declare global {
  interface Window {
    electron: any;
  }
}

// ---------- express ---------- //
import { router as openRouter } from './routes/open';

const expressApp: express.Application = express();
const expressAppPort = 3001;

expressApp.use('/open', openRouter);

expressApp.listen(expressAppPort);

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).then(() => {
    return;
  });

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  const mainMenu = Menu.buildFromTemplate([
    {
      label: 'File',
      submenu: [
        {
          label: 'New',
          accelerator: 'Ctrl+N'
        },
        {
          label: 'Open',
          accelerator: 'Ctrl+O',
          click() {
            dialog.showOpenDialog({
              properties: ['openFile', 'multiSelections'],
              defaultPath: os.homedir()

            }).then(res => {
              console.log(res)

              res.filePaths.forEach(path => {
                const content: string = fs.readFileSync(path.toString()).toString();
                console.log(content)
              });
              return;
            });
          }
        },
        {
          label: 'Save',
          accelerator: 'Ctrl+S'
        },
        {
          label: 'Save As',
          accelerator: 'Ctrl+Shift+S'
        },
        {
          type: 'separator'
        },
        {
          label: 'Exit',
          accelerator: 'Ctrl+Shift+X',
          click() {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'View',
      submenu: [
        {
          label: 'Reload',
          accelerator: 'Ctrl+R'
        },
        {
          type: 'separator'
        },
        {
          label: 'Actual Size',
        },
        {
          label: 'Zoom In',
          accelerator: 'Ctrl+Plus'
        },
        {
          label: 'Zoom Out',
          accelerator: 'Ctrl+-'
        }
      ]
    },
    {
      label: 'Edit',
      submenu: [
        {
          label: 'Cut',
          accelerator: 'Ctrl+X'
        },
        {
          label: 'Copy',
          accelerator: 'Ctrl+C'
        },
        {
          label: 'Paste',
          accelerator: 'Ctrl+V'
        },
        {
          type: 'separator'
        },
        {
          label: 'Select All',
          accelerator: 'Ctrl+A'
        }
      ]
    },
    {
      label: 'Help',
      submenu: [
        {
          label: 'Documentation'
        }
      ]
    }
  ]);
  Menu.setApplicationMenu(mainMenu);
}

ipcMain.on('notify', (event, data) => {

// here we can process the data

// we can send reply to react using below code
  console.log(data)

  event.reply('notify-response', 'Hey react app processed your event');
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
