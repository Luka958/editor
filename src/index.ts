import {app, BrowserWindow, Menu, dialog, ipcMain, shell, ipcRenderer} from 'electron';
import os from 'node:os';
import fs from 'node:fs';
import path from 'node:path';

// auto-generated by Forge's Webpack
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const INITIAL_WIDTH = 1024;
const INITIAL_HEIGHT = 720;
const DOCUMENTATION = 'https://github.com/Luka958/editor';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// ---------- make an electron attribute of the window global ---------- //
declare global {
  interface Window {
    electron: any;
  }
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: INITIAL_WIDTH,
    height: INITIAL_HEIGHT,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).then(() => {
    return;
  });

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  const INITIAL_ZOOM_FACTOR = mainWindow.webContents.getZoomFactor();
  const mainMenu = Menu.buildFromTemplate([
    {
      label: 'File',
      submenu: [
        {
          label: 'New File',
          accelerator: 'Ctrl+N'
        },
        {
          label: 'New Project',
          accelerator: 'Ctrl+Shift+N'
        },
        {
          label: 'Open File',
          accelerator: 'Ctrl+O',
          click() {
            dialog.showOpenDialog({
              properties: ['openFile'],
              defaultPath: os.homedir()

            }).then(res => {
              if (res.canceled) {
                return;
              }
              res.filePaths.forEach(filePath => {
                const content: string = fs.readFileSync(filePath.toString()).toString();
                mainWindow.webContents.send('open-file', {
                  path: filePath,
                  name: path.basename(filePath),
                  content: content
                });
              });
            });
          }
        },
        {
          label: 'Open Project',
          accelerator: 'Ctrl+Shift+O',
          click() {
            dialog.showOpenDialog({
              properties: ['openDirectory'],
              defaultPath: os.homedir()

            }).then(res => {
              if (res.canceled) {
                return;
              }
              res.filePaths.forEach(dirPath => {
                mainWindow.webContents.send('open-directory', {
                  path: dirPath,
                  name: path.basename(dirPath)
                });
              });
            });
          }
        },
        {
          label: 'Save',
          accelerator: 'Ctrl+S'
        },
        {
          label: 'Save As',
          accelerator: 'Ctrl+Shift+S'
        },
        {
          type: 'separator'
        },
        {
          label: 'Exit',
          accelerator: 'Ctrl+Shift+X',
          click() {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'Window',
      submenu: [
        {
          label: 'Minimize',
          accelerator: 'Ctrl+M',
          click() {
            mainWindow.minimize();

          }
        },
        {
          label: 'Maximize',
          accelerator: 'F11',
          click() {
            mainWindow.maximize();
          }
        },
        {
          label: 'Restore',
          accelerator: 'F12',
          click() {
            mainWindow.setSize(INITIAL_WIDTH, INITIAL_HEIGHT);
          }
        }
      ]
    },
    {
      label: 'View',
      submenu: [
        {
          label: 'Reload',
          accelerator: 'Ctrl+R',
          click() {
            mainWindow.reload();
          }
        },
        {
          type: 'separator'
        },
        {
          label: 'Zoom In',
          accelerator: 'F1',
          click() {
            const currentZoom = mainWindow.webContents.getZoomFactor();
            mainWindow.webContents.setZoomFactor(currentZoom + 0.2);
          }
        },
        {
          label: 'Zoom Out',
          accelerator: 'F2',
          click() {
            const currentZoom = mainWindow.webContents.getZoomFactor();
            mainWindow.webContents.setZoomFactor(currentZoom - 0.2);
          }
        },
        {
          label: 'Actual Size',
          accelerator: 'F3',
          click() {
            mainWindow.webContents.setZoomFactor(INITIAL_ZOOM_FACTOR);
          }
        }
      ]
    },
    {
      label: 'Edit',
      submenu: [
        {
          label: 'Cut',
          accelerator: 'Ctrl+X'
        },
        {
          label: 'Copy',
          accelerator: 'Ctrl+C'
        },
        {
          label: 'Paste',
          accelerator: 'Ctrl+V'
        },
        {
          type: 'separator'
        },
        {
          label: 'Select All',
          accelerator: 'Ctrl+A'
        }
      ]
    },
    {
      label: 'Help',
      submenu: [
        {
          label: 'Documentation',
          click() {
            shell.openExternal(DOCUMENTATION)
              .then(() => {return;});
          }
        }
      ]
    }
  ]);
  Menu.setApplicationMenu(mainMenu);
}

ipcMain.on('notify', (event, data) => {
  console.log(data);
  event.reply('notify-response', 'Hey react app processed your event');
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// todo https://stackoverflow.com/questions/62433323/using-the-electron-ipcrenderer-from-a-front-end-javascript-file